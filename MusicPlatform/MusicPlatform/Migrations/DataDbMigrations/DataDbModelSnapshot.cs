// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicPlatform.Services;

namespace MusicPlatform.Migrations.DataDbMigrations
{
    [DbContext(typeof(DataDb))]
    partial class DataDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MusicPlatform.Model.Library.CreditModel", b =>
                {
                    b.Property<Guid>("CreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Performer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Writer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreditId");

                    b.HasIndex("SongId")
                        .IsUnique();

                    b.ToTable("SongCredits");
                });

            modelBuilder.Entity("MusicPlatform.Model.Library.SongImage", b =>
                {
                    b.Property<Guid>("SongImageid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SongImageid");

                    b.HasIndex("SongId")
                        .IsUnique();

                    b.ToTable("SongImages");
                });

            modelBuilder.Entity("MusicPlatform.Model.Library.SongLibrary", b =>
                {
                    b.Property<Guid>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LibraryId");

                    b.HasIndex("SongId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("MusicPlatform.Model.Library.SongModel", b =>
                {
                    b.Property<Guid>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArtistId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Download")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleasedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SongName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserProfileProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SongId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserProfileProfileId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicPlatform.Model.User.Profile.FollowingModel", b =>
                {
                    b.Property<Guid>("FollowingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FollowerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserProfileProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FollowingId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserProfileProfileId");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("MusicPlatform.Model.User.Profile.UserImage", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ImageId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("MusicPlatform.Model.User.Profile.UserProfile", b =>
                {
                    b.Property<Guid>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("MusicPlatform.Model.User.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UserModel");
                });

            modelBuilder.Entity("MusicPlatform.Model.Library.CreditModel", b =>
                {
                    b.HasOne("MusicPlatform.Model.Library.SongModel", "Song")
                        .WithOne("CreditModel")
                        .HasForeignKey("MusicPlatform.Model.Library.CreditModel", "SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicPlatform.Model.Library.SongImage", b =>
                {
                    b.HasOne("MusicPlatform.Model.Library.SongModel", "Song")
                        .WithOne("SongImage")
                        .HasForeignKey("MusicPlatform.Model.Library.SongImage", "SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicPlatform.Model.Library.SongLibrary", b =>
                {
                    b.HasOne("MusicPlatform.Model.Library.SongModel", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicPlatform.Model.Library.SongModel", b =>
                {
                    b.HasOne("MusicPlatform.Model.User.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("MusicPlatform.Model.User.Profile.UserProfile", "UserProfile")
                        .WithMany("Songs")
                        .HasForeignKey("UserProfileProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MusicPlatform.Model.User.Profile.FollowingModel", b =>
                {
                    b.HasOne("MusicPlatform.Model.User.Profile.UserProfile", "FollowerProfile")
                        .WithMany("Followings")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlatform.Model.User.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("MusicPlatform.Model.User.Profile.UserProfile", "FollowingProfile")
                        .WithMany("Followers")
                        .HasForeignKey("UserProfileProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowerProfile");

                    b.Navigation("FollowingProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicPlatform.Model.User.Profile.UserImage", b =>
                {
                    b.HasOne("MusicPlatform.Model.User.Profile.UserProfile", "UserProfile")
                        .WithOne("UserImage")
                        .HasForeignKey("MusicPlatform.Model.User.Profile.UserImage", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlatform.Model.User.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MusicPlatform.Model.User.Profile.UserProfile", b =>
                {
                    b.HasOne("MusicPlatform.Model.User.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicPlatform.Model.Library.SongModel", b =>
                {
                    b.Navigation("CreditModel");

                    b.Navigation("SongImage");
                });

            modelBuilder.Entity("MusicPlatform.Model.User.Profile.UserProfile", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("Songs");

                    b.Navigation("UserImage");
                });
#pragma warning restore 612, 618
        }
    }
}
